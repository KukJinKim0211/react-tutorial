{"ast":null,"code":"import { useEffect, useState, useRef } from 'react';\nimport store from 'store';\nexport const usePrevious = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};\nexport const useKeyPress = targetKey => {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false); // If pressed key is our target key then set to true\n\n  function downHandler(_ref) {\n    let {\n      key\n    } = _ref;\n\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  } // If released key is our target key then set to false\n\n\n  const upHandler = _ref2 => {\n    let {\n      key\n    } = _ref2;\n\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }; // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n};\nexport const useLocalStorageSetState = (initialValue, name) => {\n  if (!name) {\n    throw new Error('Name must be provided to persist to localStorage');\n  }\n\n  const actualInitialValue = store.get(name) !== undefined ? store.get(name) : initialValue;\n  const [value, setValue] = useState(actualInitialValue);\n  useEffect(() => {\n    store.set(name, value);\n  }, [value]);\n  return [value, setValue];\n};\nexport const useIntersectionObserver = _ref3 => {\n  let {\n    root,\n    target,\n    onIntersect,\n    threshold = 1.0,\n    rootMargin = '0px'\n  } = _ref3;\n  useEffect(() => {\n    if (!root) {\n      return;\n    }\n\n    const observer = new IntersectionObserver(onIntersect, {\n      root,\n      rootMargin,\n      threshold\n    });\n\n    if (!target) {\n      return;\n    }\n\n    observer.observe(target);\n    return () => {\n      observer.unobserve(target);\n    };\n  }, [target, root, rootMargin, onIntersect, threshold]);\n};","map":{"version":3,"names":["useEffect","useState","useRef","store","usePrevious","value","ref","current","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","useLocalStorageSetState","initialValue","name","Error","actualInitialValue","get","undefined","setValue","set","useIntersectionObserver","root","target","onIntersect","threshold","rootMargin","observer","IntersectionObserver","observe","unobserve"],"sources":["/Users/kimkukjin/Git/react/skeleton-project-master/frontend/src/common/CommonHooks.jsx"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport store from 'store';\n\nexport const usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};\n\nexport const useKeyPress = (targetKey) => {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n};\n\nexport const useLocalStorageSetState = (initialValue, name) => {\n  if (!name) {\n    throw new Error('Name must be provided to persist to localStorage');\n  }\n  const actualInitialValue =\n    store.get(name) !== undefined ? store.get(name) : initialValue;\n  const [value, setValue] = useState(actualInitialValue);\n\n  useEffect(() => {\n    store.set(name, value);\n  }, [value]);\n  return [value, setValue];\n};\n\nexport const useIntersectionObserver = ({\n  root,\n  target,\n  onIntersect,\n  threshold = 1.0,\n  rootMargin = '0px',\n}) => {\n  useEffect(() => {\n    if (!root) {\n      return;\n    }\n\n    const observer = new IntersectionObserver(onIntersect, {\n      root,\n      rootMargin,\n      threshold,\n    });\n\n    if (!target) {\n      return;\n    }\n\n    observer.observe(target);\n\n    return () => {\n      observer.unobserve(target);\n    };\n  }, [target, root, rootMargin, onIntersect, threshold]);\n};\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;EACpC,MAAMC,GAAG,GAAGJ,MAAM,EAAlB;EACAF,SAAS,CAAC,MAAM;IACdM,GAAG,CAACC,OAAJ,GAAcF,KAAd;EACD,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;EAGA,OAAOC,GAAG,CAACC,OAAX;AACD,CANM;AAQP,OAAO,MAAMC,WAAW,GAAIC,SAAD,IAAe;EACxC;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C,CAFwC,CAIxC;;EACA,SAASW,WAAT,OAA8B;IAAA,IAAT;MAAEC;IAAF,CAAS;;IAC5B,IAAIA,GAAG,KAAKJ,SAAZ,EAAuB;MACrBE,aAAa,CAAC,IAAD,CAAb;IACD;EACF,CATuC,CAWxC;;;EACA,MAAMG,SAAS,GAAG,SAAa;IAAA,IAAZ;MAAED;IAAF,CAAY;;IAC7B,IAAIA,GAAG,KAAKJ,SAAZ,EAAuB;MACrBE,aAAa,CAAC,KAAD,CAAb;IACD;EACF,CAJD,CAZwC,CAkBxC;;;EACAX,SAAS,CAAC,MAAM;IACde,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,WAAnC;IACAG,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC,EAFc,CAGd;;IACA,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,WAAtC;MACAG,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;IACD,CAHD;EAID,CARQ,EAQN,EARM,CAAT,CAnBwC,CA2BhC;;EAER,OAAOJ,UAAP;AACD,CA9BM;AAgCP,OAAO,MAAMQ,uBAAuB,GAAG,CAACC,YAAD,EAAeC,IAAf,KAAwB;EAC7D,IAAI,CAACA,IAAL,EAAW;IACT,MAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;EACD;;EACD,MAAMC,kBAAkB,GACtBnB,KAAK,CAACoB,GAAN,CAAUH,IAAV,MAAoBI,SAApB,GAAgCrB,KAAK,CAACoB,GAAN,CAAUH,IAAV,CAAhC,GAAkDD,YADpD;EAEA,MAAM,CAACd,KAAD,EAAQoB,QAAR,IAAoBxB,QAAQ,CAACqB,kBAAD,CAAlC;EAEAtB,SAAS,CAAC,MAAM;IACdG,KAAK,CAACuB,GAAN,CAAUN,IAAV,EAAgBf,KAAhB;EACD,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;EAGA,OAAO,CAACA,KAAD,EAAQoB,QAAR,CAAP;AACD,CAZM;AAcP,OAAO,MAAME,uBAAuB,GAAG,SAMjC;EAAA,IANkC;IACtCC,IADsC;IAEtCC,MAFsC;IAGtCC,WAHsC;IAItCC,SAAS,GAAG,GAJ0B;IAKtCC,UAAU,GAAG;EALyB,CAMlC;EACJhC,SAAS,CAAC,MAAM;IACd,IAAI,CAAC4B,IAAL,EAAW;MACT;IACD;;IAED,MAAMK,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBJ,WAAzB,EAAsC;MACrDF,IADqD;MAErDI,UAFqD;MAGrDD;IAHqD,CAAtC,CAAjB;;IAMA,IAAI,CAACF,MAAL,EAAa;MACX;IACD;;IAEDI,QAAQ,CAACE,OAAT,CAAiBN,MAAjB;IAEA,OAAO,MAAM;MACXI,QAAQ,CAACG,SAAT,CAAmBP,MAAnB;IACD,CAFD;EAGD,CApBQ,EAoBN,CAACA,MAAD,EAASD,IAAT,EAAeI,UAAf,EAA2BF,WAA3B,EAAwCC,SAAxC,CApBM,CAAT;AAqBD,CA5BM"},"metadata":{},"sourceType":"module"}